// <auto-generated />
using System;
using Child_Care_Mangement_System.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Child_Care_Mangement_System.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("Child_Care_Mangement_System.Models.Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChildId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PaymentHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TotalDue")
                        .HasColumnType("REAL");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BillId");

                    b.HasIndex("ChildId");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.CareCategory", b =>
                {
                    b.Property<int>("CareCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("CareCategoryId");

                    b.ToTable("CareCategories");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.CarerClockHistory", b =>
                {
                    b.Property<int>("CarerClockHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ClockIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ClockOut")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CarerClockHistoryId");

                    b.HasIndex("CarerId");

                    b.HasIndex("ShiftId")
                        .IsUnique();

                    b.ToTable("CarerClockHistories");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.Child", b =>
                {
                    b.Property<int>("ChildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CareCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChildId");

                    b.HasIndex("CareCategoryId");

                    b.HasIndex("ParentId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.ChildClockHistory", b =>
                {
                    b.Property<int>("ChildClockHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BillId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChildId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ClockIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ClockOut")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("ChildClockHistoryId");

                    b.HasIndex("BillId");

                    b.HasIndex("ChildId");

                    b.ToTable("ChildClockHistories");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.ChildHealthLog", b =>
                {
                    b.Property<int>("ChildHealthLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChildId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("ChildHealthLogId");

                    b.HasIndex("ChildId");

                    b.ToTable("ChildHealthLogs");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.ChildMealLog", b =>
                {
                    b.Property<int>("ChildMealLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChildId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DietId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MealId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChildMealLogId");

                    b.HasIndex("ChildId");

                    b.HasIndex("DietId");

                    b.HasIndex("MealId");

                    b.ToTable("ChildMealLogs");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.Diet", b =>
                {
                    b.Property<int>("DietId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("CalorieRequirement")
                        .HasColumnType("REAL");

                    b.Property<int>("ChildId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MealId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeekDay")
                        .HasColumnType("INTEGER");

                    b.HasKey("DietId");

                    b.HasIndex("ChildId");

                    b.HasIndex("MealId");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.EatWellCategory", b =>
                {
                    b.Property<int>("EatWellCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("EatWellCategoryId");

                    b.ToTable("EatWellCategories");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Calorie")
                        .HasColumnType("REAL");

                    b.Property<double>("Carbs")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EatWellCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Fat")
                        .HasColumnType("REAL");

                    b.Property<double>("Protein")
                        .HasColumnType("REAL");

                    b.Property<double>("ServingSize")
                        .HasColumnType("REAL");

                    b.Property<double>("Sugar")
                        .HasColumnType("REAL");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EatWellCategoryId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.PaymentHistory", b =>
                {
                    b.Property<int>("PaymentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BillId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChildId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PaymentHistoryId");

                    b.HasIndex("BillId")
                        .IsUnique();

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId");

                    b.ToTable("PaymentHistories");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "11bf815d-722b-4bc8-b28e-3b8f04a589a2",
                            Name = "Parent",
                            NormalizedName = "PARENT"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "c5632553-c743-4943-84b6-a6cf5ae69019",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "ccf1a20a-af9e-4e6b-a185-8ada35e5e3c9",
                            Name = "Supervisor",
                            NormalizedName = "SUPERVISOR"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "812c126f-f02f-49d6-bd56-fb380bb05f3b",
                            Name = "Carer",
                            NormalizedName = "CARER"
                        });
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.SetAvilability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("From")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("To")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarerId");

                    b.ToTable("SetAvilabilities");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("From")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ShiftDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("To")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarerId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prefix")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90b14719-76e2-4d9b-84d4-40b342ab571d",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDLV4N3gCYNDZX0m9mnlDb2tVLi9B6jhusqxSqkay2U2GQUjnfqSDHxLGDDEK2+KzA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26af227c-474d-4b8f-87cb-8b1bb425f4b1",
                            Email = "carer@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CARER@EXAMPLE.COM",
                            NormalizedUserName = "CARER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM22V0fRBx4oEMkAyucwYPxxbrEvJAjJOoIl99XD+ibxa1eK9ONXYjRymc67YJ0PRg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "carer@example.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d0680e3-c624-4d35-802b-1a195e62916b",
                            Email = "supervisor@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERVISOR@EXAMPLE.COM",
                            NormalizedUserName = "SUPERVISOR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIWWsa80X15QNpjp3jW7IBZ/DRhTwZyhEJB4OpVDP+NbKC6y4RdgfAqSQ2rQ4X9IDw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "supervisor@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.Bill", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.Child", "Child")
                        .WithMany("Bills")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Child_Care_Mangement_System.Models.User", null)
                        .WithMany("Bills")
                        .HasForeignKey("UserId");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.CarerClockHistory", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.User", "Carer")
                        .WithMany("CarerClockHistory")
                        .HasForeignKey("CarerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Child_Care_Mangement_System.Models.Shift", "Shift")
                        .WithOne("CarerClockHistory")
                        .HasForeignKey("Child_Care_Mangement_System.Models.CarerClockHistory", "ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carer");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.Child", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.CareCategory", "CareCategory")
                        .WithMany("Children")
                        .HasForeignKey("CareCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Child_Care_Mangement_System.Models.User", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareCategory");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.ChildClockHistory", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.Bill", "Bill")
                        .WithMany("ChildClockHistories")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Child_Care_Mangement_System.Models.Child", "Child")
                        .WithMany("ChildClockHistories")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.ChildHealthLog", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.Child", "Child")
                        .WithMany("ChildHealthLogs")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.ChildMealLog", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.Child", "Child")
                        .WithMany("ChildMealLogs")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Child_Care_Mangement_System.Models.Diet", "Diet")
                        .WithMany()
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Child_Care_Mangement_System.Models.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Diet");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.Diet", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.Child", null)
                        .WithMany("Diets")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Child_Care_Mangement_System.Models.Meal", "Meal")
                        .WithMany("Diets")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.Meal", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.EatWellCategory", "EatWellCategory")
                        .WithMany("Meals")
                        .HasForeignKey("EatWellCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EatWellCategory");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.PaymentHistory", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.Bill", "Bill")
                        .WithOne("PaymentHistory")
                        .HasForeignKey("Child_Care_Mangement_System.Models.PaymentHistory", "BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Child_Care_Mangement_System.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Child_Care_Mangement_System.Models.User", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.SetAvilability", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.User", "Carer")
                        .WithMany("Availabilities")
                        .HasForeignKey("CarerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carer");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.Shift", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.User", "Carer")
                        .WithMany("Shifts")
                        .HasForeignKey("CarerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Child_Care_Mangement_System.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Child_Care_Mangement_System.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.Bill", b =>
                {
                    b.Navigation("ChildClockHistories");

                    b.Navigation("PaymentHistory");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.CareCategory", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.Child", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("ChildClockHistories");

                    b.Navigation("ChildHealthLogs");

                    b.Navigation("ChildMealLogs");

                    b.Navigation("Diets");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.EatWellCategory", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.Meal", b =>
                {
                    b.Navigation("Diets");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.Shift", b =>
                {
                    b.Navigation("CarerClockHistory");
                });

            modelBuilder.Entity("Child_Care_Mangement_System.Models.User", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Bills");

                    b.Navigation("CarerClockHistory");

                    b.Navigation("Children");

                    b.Navigation("Shifts");
                });
#pragma warning restore 612, 618
        }
    }
}
